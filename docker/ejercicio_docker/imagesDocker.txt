
Imagenes Docker
Creando imágenes personalizadas

Para crear nuestras propias imágenes nos apoyaremos del uso del Dockerfile.

    El servicio que se instala en una imagen debe ser efímero, ósea debe ser fácil de destruir.
    Una imagen debe tener responsabilidad única, osea un solo servicio por imagen.
    Utilizar el .dockerignore en archivos pesados.
    Las imágenes deben de tener el mínimo de capas, esto reduce su tamaño y su peso.
    Separar argumentos mediante \.
    No instalar paquetes innecesarios.
    Labels para metadata.

Dockerfile

Como se vio anteriormente, el primer paso para crear una imagen es partir de un Dockerfile, el dockerfile es un archivo de texto plano. En este ejemplo crearemos un contenedor con apache.

Lo primero es buscar una base para nuestra imagen, debemos de colocar la capa FROM, que en este caso, será el sistema operativo que tendrá nuestra imagen.

Para esto, tenemos imágenes oficiales de distintos sistemas operativos: Ubuntu, CentOS, RedHat etc. En el caso de Windows, no se tiene todo un sistema operativo en una imagen, pero si se tiene el core del windows server y solo es compatible con ciertas arquitecturas y sistemas operativos. En este caso utilizaremos una imagen base de ubuntu, ya que no especificaremos el tag, asumimos que será la última versión por default.

Ya que tenemos la base, definiremos nuestra segunda capa, en esta nosotros montaremos el servidor Apache http.

FROM ubuntu
      

Esta capa utiliza el comando RUN, la sintaxis de esta capa dependerá mucho del sistema operativo base que elegimos, ya que es diferente la sintaxis en cada uno de estos. Al elegir Ubuntu, nos vemos forzados a utilizar apt-get para la instalación de apache.

Utilizaremos las banderas "-y" sirven para evitar que el sistema operativo cree diálogos.


FROM ubuntu:latest
RUN apt-get update -y
RUN apt-get install apache2 -y

Una vez que tenemos lista esta capa, necesitamos una capa extra que haga que la imagen, al momento de volverse un contenedor, se mantenga "viva", en otras palabras se necesita un proceso en el background que evite que el sistema operativo se quede sin procesos.

En este caso utilizaremos un comando que hará que el apache siga su ejecución en segundo plano.

Ahora para construir la imagen se necesita utilizar el comando build, este comando se utiliza de la manera siguiente:


FROM ubuntu:latest
RUN apt-get update -y
RUN apt-get install apache2 -y
CMD ["/usr/sbin/apache2ct1", "-DFOREGROUND"]

docker build.

El docker build es el comando estándar de construcción de una imagen, el "." sirve para indicar que el dockerfile está en en el mismo directorio en donde se está ejecutando el comando.

El comando build puede extenderse de tal manera que nos permita especificar más de nuestra imagen. En este caso se utiliza la bandera "-t", para indicar el nombre y la versión de la imagen. De igual manera se puede especificar un dockerfile que se encuentre en otro directorio utilizando la bandera "-f" seguido de la ruta en donde se encuentra el dockerfile que se construirá,

Una vez aplicada la construcción podemos ver que la imagen ya está disponible en nuestro sistema. Para ver todas las imágenes que se tienen, se utiliza el comando.

docker images.
docker images

docker images

Al ser prácticamente comandos del sistema operativo lo que se escribe en las capas de la imagen, es normal que se despliegue tanto texto en la pantalla.
Eliminando imágenes

Primero consultamos las imágenes disponibles con el comando:

docker images

El comando nos presenta el siguiente resultado:
docker images

Ahora procedemos a eliminar la imagen deseada, usando el comando:

"docker rmi [nombreimagen:tag]" o también "docker rmi [idimagen]"

El comando nos presenta el siguiente resultado:
docker images

Cambiando el nombre de una imagen

Para construir imágenes se utiliza el comando "build", y este busca en el directorio raíz el archivo "dockerfile". En algunos casos, podemos necesitar construir un dockerfile con un nombre distinto al estándar, en este caso se utiliza la bandera "-f" para especificar el nombre del archivo del que se basará la imagen.

docker build -t [nombreimagen:tag] -f [nombre del archivo]
Dangling images

El dangling images puede ser considerado como un “choque” de referencias entre las imágenes. Esto sucede por que:

    Se creó una imagen sin especificar su nombre.
    Se crearon dos imágenes con el mismo nombre.

En el segundo caso, el nombre que se especificó únicamente queda asignado a la segunda imagen. Mientras que la primeras queda con lo siguiente: Sin nombre y sin tag.
docker images

Multi-Stage-Build
El multi-stage es una herramienta utilizada en la creación de imágenes que nos permite utilizar distintas capas FROM para eficientar la creación de estas mismas y evitar tener imágenes demasiado pesadas.

Utilizando esta característica de Docker, podemos reducir complejidad de nuestras imágenes, ya que nos permite declarar más de una imagen en un único archivo Dockerfile, esto a través del uso del nombrando de stages o etapas:

Veamos el contenido de un Dockerfile de ejemplo:


FROM maven:3.5-alpine as builder
 
COPY app /app
 
RUN cd /app && mvn package
 
FROM openjdk:8-alpine
 
COPY --from=builder /app/target/my-app-1.0-SNAPSHOT.jar /opt/app.jar
 
CMD java -jar /opt/app.jar

Como podemos ver en el ejemplo anterior, en la primera etapa construimos una aplicación maven alojada en el directorio “app” y el la segunda etapa construimos una nueva imagen con base en la aplicación construida en la primera etapa.
Comandos del dockerfile
El dockerfile se maneja mediante una sintaxis definida que le indica al comando build que hacer. En esta sección veremos los principales comandos que se utilizan al crear una imagen.
From

Este comando es la primera capa del dockerfile. Como se vio anteriormente, este sirve para indicar la imagen base del dockerfile que se está creando. Esta puede ser tanto la imagen de un sistema operativo, como la imagen de otro servicio (apache,nodejs…).
Run

Indica una operación de ejecución del sistema operativo. Al indicar la imagen base en la capa From de la cual se hará la nueva imagen, especificamos un sistema operativo y con esto también especificamos un conjunto de instrucciones que pueden realizarse en la imagen. Si por ejemplo queremos ejecutar la instrucción mkdir propia de linux, tendremos que utilizar el comando Run de la manera "RUN mkdir ejemplo". Si queremos mover un fichero de un lugar a otro, utilizaremos el comando Run tal que "RUN mv origen destino".

El comando copy sirve para agregar archivos de nuestra máquina a la imagen que estamos creando y se utiliza de la manera “COPY origen destino”. En el comando COPY, origen tiene que ser la ruta de nuestra computadora en donde se encuentre el archivo o archivos que queremos enviar, mientras que destino es la ruta de la imagen que recibirá lo enviado de origen.

Lo mismo que se hizo con la instrucción Copy, se puede realizar con la instrucción Add, a diferencia es que la instrucción Add puede agregar archivos directo de una URL. La instrucción Add se utiliza de la manera “Add origen destino”, donde el origen puede ser o una ruta de la computadora con el archivo o archivos que se enviaran, o una URL de la cual se descargara el archivo o archivos que se enviaran a destino.
Env

La instrucción env se utiliza para crear variables de entorno en la imagen. La instrucción Env se utiliza de la manera “ENV nombre valor” en donde nombre es el nombre de la variable de entorno y valor es lo que almacena. La instrucción Env resulta de mucha utilidad, en especial en imágenes oficiales, estas pueden definir valores como por ejemplo: La contraseña del usuario root de una base de datos mysql, la dirección de un directorio que almacena distintas herramientas o el nombre de dependencias que se descargan en la imagen.
Workdir

La instrucción Workdir se puede tomar como una instrucción para modificar el entorno de ejecución de la imagen. Al declarar la instrucción Workdir estamos declarando la dirección en la imagen desde la que se ejecutarán las instrucciones posteriores.

Ejemplo:


RUN pwd
 Workdir carpeta1/carpeta2/

RUN pwd

La primera instrucción pwd nos señalará la ruta "ruta/original/", mientras que la segunda nos dará la ruta "ruta/original/carpeta1/carpeta2".
Expose

La instrucción expose simplemente expone un puerto de la imagen. Se utiliza de la forma "EXPOSE puerto" en donde puerto es el número del puerto que se expondrá.
Label

La instrucción label es la más sencilla, únicamente sirve para asignar metadata a la imagen. Se escribe de la forma "LABEL nombre=valor". En donde nombre será el nombre de la etiqueta y valor será el valor que se almacenará. Es similar a las variables de entorno, pero no tienen la misma funcionalidad ni las mismas propiedades. En este caso, la etiqueta puede contener todo un string con datos relacionados a la información de la imagen.
User

Indica qué usuario ejecutará las instrucciones posteriores, el usuario por default es root. Se utiliza de la forma "USER nombre" donde user es el nombre del usuario que ejecutará las siguientes instrucciones. Esta instrucción no crea un nuevo usuario, únicamente hace el cambio, esto quiere decir que antes de utilizar esta instrucción, el usuario que tomara el control debe o ya estar creado o ser creado en alguna capa anterior.
Volume

Un volumen en docker es una manera de persistir información de contenedor en la máquina física que ejecuta docker. Recordemos que, si bien los contenedores tienen capas de escritura y son modificables, estos no persisten más allá del momento en que eliminamos el contenedor. Esta información puede mantenerse tanto en volúmenes anónimos como volúmenes nombrados (para más información, ver la sección de volúmenes).

En el caso de las imágenes, los volúmenes creados se llaman volúmenes anónimos, persisten datos en un folder ubicado en la carpeta de instalación de docker. Este folder no tendrá un nombre descriptivo, únicamente será un id.

La instrucción Volume se escribe de la forma "Volume dirección", en donde la dirección es la ruta de él o los archivos que persistirán.
CMD

La instrucción CMD, como se vio anteriormente, sirve para ejecutar un comando de la imagen en el momento en que esta se convierta en un contenedor. Generalmente, el cmd se utiliza para ejecutar un comando que mantendrá el contenedor "vivo". En el caso del apache, CMD ["apachectl", "- DFOREGROUND"]; con Tomcat, CMD ["catalina.sh", "run"].

Otra práctica común en los dockerfile es ejecutar un .sh en el CMD, este puede haber sido creado y copiado dentro del contenedor con la instrucción copy.

Ejemplo de dockerfile con argumentos:


FROM httpd
 
LABEL info="this document is only and example of a dockerfile with multi arguments"
 
RUN useradd newuser
 
WORKDIR /usr/local/apache2/
 
COPY . /htdocs/
 
ENV key docker
 
EXPOSE 80
 
USER newuser
 
RUN whoami
 
VOLUME .
 
#The CMD could be empty, in this case doestn matter
CMD ["/usr/sbin/apache2ctl", "-DFOREGROUND"]

