en este multicontainer vamos a correr uno de mysql y la applicacion

lo primero que vamos a hacer es crear una network
porque queremos que ambos conteneores corran en la misma red
y se puedan uno al otro

so lo primero que haremos sera crear la red

docker network create "nombre de la app" 

ejemplo docker network create todo-app

entonces ahora vamos a correr docker de la siguiente forma

docker run -d\
--network "nombre del multicontainer" --network-alias "alias para la ip" \
-v "pasamos un nombre de directorio":"ubicacion donde queremos que lo monte" \
-e "pasamos variable de entorno"=secret \
-e "pasamos variable de entorno"=todos \
"pasamos la imagen que queremos correr"

ejemplo:

docker run -d \
--network todo-app --network-alias mysql \
-v todo-mysql-data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=secret \
-e MYSQL_DATABASE=todos \
mysql:5.7

ahora usaremos docker exec para ver el contenido de la bd

docker exec -it "id del contenedor" mysql -p

podemos correr show databases;
para ver la tabla nueva que creamos llamada todos

ahora podemos correr un contenedor en la misma network para poder usar 
esa base de datos

vamos a correr esta imagen que se llama netshoot

docker run -it --network "nombre de la network" nicolaka/netshoot

ejemplo
docker run it --network todo-app nicolaka/netshoot

ahora correremos dig mysql para que resuelva la ip de
mysql


ahora lo que vamos a hacer es correr la aplicacion que creamos getting-startd
pero en lugar de usar sqlite vamos a hacer que se conecte a mysql

entonces vamos a correr

docker run -dp 3000:3000 \
--network todo-app \
-e MYSQL_HOST=mysql \
-e MYSQL_USER=root \
-e MYSQL_PASSWORD=secret \
-e MYSQL_DB=todos \
getting-started:v2


para comprobar si esta conectado pasamos el comandos

docker logs "id de la imagen"

de esta forma se pueden conectar dos conectar dos contenedores 




